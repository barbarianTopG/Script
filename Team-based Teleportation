local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Teleport Moving Players (Team-based)",
    Icon = 12345678901,  -- diamond icon ID?
    LoadingTitle = "Loading Teleport System",
    LoadingSubtitle = "By COMBO_WICK",
    Theme = "Ocean"
})

-- Variables
local teleportDistance = 10  -- Distance in front of the local player to teleport others
local teleporting = false  -- Toggle for continuous teleportation

-- Function to teleport players in front of the local player if they're moving and on opposing teams
local function teleportMovingEnemies()
    local localPlayer = game.Players.LocalPlayer
    local character = localPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        local camera = workspace.CurrentCamera
        local cameraDirection = camera.CFrame.LookVector

        -- Loop through all players and teleport them if they're moving and on opposing team
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= localPlayer then
                local targetCharacter = player.Character
                local humanoid = targetCharacter:FindFirstChild("Humanoid")
                local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                
                -- Check if the player is on a different team and moving
                if targetRootPart and humanoid and humanoid.MoveDirection.magnitude > 0 then
                    if player.Team ~= localPlayer.Team then  -- Check if they're on a different team
                        -- Calculate the new position in front of the local player
                        local newPosition = rootPart.Position + cameraDirection * teleportDistance
                        
                        -- Teleport and ensure they are grounded (add small downward vector)
                        targetRootPart.CFrame = CFrame.new(newPosition) * CFrame.new(0, -3, 0)
                        
                        -- Remove any BodyGyros or other constraints that may interfere with player interaction
                        for _, v in pairs(targetCharacter:GetChildren()) do
                            if v:IsA("BodyGyro") or v:IsA("BodyPosition") then
                                v:Destroy()
                            end
                        end

                        -- Prevent them from being teleported back to their original position
                        targetCharacter:MoveTo(newPosition)
                        
                        -- Allow the player to interact (e.g., get damaged or killed) after teleporting
                        if humanoid then
                            humanoid.PlatformStand = false  -- Ensure the humanoid is not locked in place
                        end

                        -- Ensure collision is enabled for the player after teleportation
                        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                    end
                end
            end
        end
    end
end

-- Toggle switch for continuous teleportation
local mainTab = Window:CreateTab("Main", 4483362458)
local toggleButton = mainTab:CreateToggle({
    Name = "Toggle Teleportation",
    CurrentValue = teleporting,
    Callback = function(value)
        teleporting = value
        if teleporting then
            while teleporting do
                teleportMovingEnemies()
                wait(0.1)  -- Adjust the delay for teleportation speed
            end
        end
    end,
})

-- Ensure players stay teleported and are moving
game:GetService("RunService").Heartbeat:Connect(function()
    if teleporting then
        teleportMovingEnemies()
    end
end)
