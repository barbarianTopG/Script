local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local DataStoreService = game:GetService("DataStoreService")

-- Config
local CONFIG = {
    WEBHOOK_URL = "https://discord.com/api/webhooks/1348317540585308261/Odr4ATl9hJMK67GOxYmSLq4sTr4B43waCLUv48LtmHIRtpBEGqt-iT-rRN803Kjh5chF",
    KEY_URL = "https://pastebin.com/raw/ZWFwRjBJ",
    SUBSCRIPTION_URL = "https://pastebin.com/raw/ThRPn5JG",
    NEWS_URL = "https://pastebin.com/raw/vTKfsvCr",
    HTTP_TIMEOUT = 10,
    FEEDBACK_COOLDOWN = 4500,
    REFRESH_INTERVAL = 180,
    VERSION = "1.3.0", -- Updated version
    VIP_PREFIX = "[VIP] ",
    ANTI_TAMPER_KEY = "VaultIntegrityCheck" -- For basic tamper detection
}

-- Local storage with DataStore backup
local vaultDataStore = DataStoreService:GetDataStore("VaultData", "v" .. CONFIG.VERSION)
local function getLocalStorage(key, default)
    local success, data = pcall(function()
        local stored = LocalPlayer:GetAttribute(key)
        if stored == nil then
            stored = vaultDataStore:GetAsync(LocalPlayer.UserId .. "_" .. key) or default
            LocalPlayer:SetAttribute(key, stored)
        end
        return stored
    end)
    return success and data or default
end

local function setLocalStorage(key, value)
    pcall(function()
        LocalPlayer:SetAttribute(key, value)
        vaultDataStore:SetAsync(LocalPlayer.UserId .. "_" .. key, value)
    end)
end

-- Anti-tamper system
local function verifyIntegrity()
    local tamperCheck = getLocalStorage(CONFIG.ANTI_TAMPER_KEY, "valid")
    if tamperCheck ~= "valid" then
        Rayfield:Notify({Title = "⚠️ Security Alert", Content = "Script integrity compromised!", Duration = 10})
        return false
    end
    setLocalStorage(CONFIG.ANTI_TAMPER_KEY, "valid")
    return true
end

-- Improved HTTP with retry and timeout
local function safeHttpGet(url, retries)
    retries = retries or 3
    local data, success, errorMsg
    for i = 1, retries do
        local requestComplete = false
        local requestThread = coroutine.create(function()
            success, data = pcall(function() return game:HttpGet(url) end)
            if not success then errorMsg = data; data = nil end
            requestComplete = true
        end)
        coroutine.resume(requestThread)
        local startTime = tick()
        while not requestComplete and (tick() - startTime) < CONFIG.HTTP_TIMEOUT do
            wait(0.1)
        end
        if requestComplete and success then return true, data end
        if i < retries then wait(1) end
    end
    return false, errorMsg or "Request timed out after " .. retries .. " attempts"
end

-- Key system
local keySystem = {
    key = nil,
    lastFetch = 0,
    isFetching = false,
    fetch = function(self)
        if self.isFetching then return end
        self.isFetching = true
        if self.key and (tick() - self.lastFetch < 300) then
            self.isFetching = false
            return self.key
        end
        Rayfield:Notify({Title = "⏳ Loading", Content = "Fetching access key...", Duration = 2})
        local success, response = safeHttpGet(CONFIG.KEY_URL)
        if success then
            self.key = response
            self.lastFetch = tick()
            self.isFetching = false
            return self.key
        else
            self.key = "Key22Changed"
            self.isFetching = false
            Rayfield:Notify({Title = "⚠️ Warning", Content = "Using fallback key.", Duration = 3})
            return self.key
        end
    end,
    verify = function(self, input)
        local keyToCheck = self:fetch()
        return input == keyToCheck
    end
}

-- Subscription system with enhanced perks
local subscriptionSystem = {
    data = {},
    lastUpdate = 0,
    fetch = function(self)
        if (tick() - self.lastUpdate) < 300 then return end
        local success, data = safeHttpGet(CONFIG.SUBSCRIPTION_URL)
        if success then
            self.data = {}
            for line in data:gmatch("[^\n]+") do
                local userId, expiry = line:match("(%d+):(%d+)")
                if userId and expiry then
                    self.data[tonumber(userId)] = tonumber(expiry)
                end
            end
            self.lastUpdate = tick()
            return true
        end
        return false
    end,
    isSubscribed = function(self, userId)
        self:fetch()
        local expiry = self.data[userId]
        return expiry and os.time() < expiry
    end,
    getTimeRemaining = function(self, userId)
        if not self:isSubscribed(userId) then return 0 end
        local expiry = self.data[userId]
        return expiry - os.time()
    end,
    formatTimeRemaining = function(self, userId)
        local seconds = self:getTimeRemaining(userId)
        if seconds <= 0 then return "Expired" end
        local days = math.floor(seconds / 86400)
        local hours = math.floor((seconds % 86400) / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        if days > 0 then return string.format("%d days, %d hours", days, hours)
        elseif hours > 0 then return string.format("%d hours, %d minutes", hours, minutes)
        else return string.format("%d minutes", minutes) end
    end,
    extendSubscription = function(self, userId, days)
        if self:isSubscribed(userId) then
            self.data[userId] = self.data[userId] + (days * 86400)
            webhookSystem:send({
                title = "⭐ Subscription Extended",
                description = LocalPlayer.DisplayName .. " extended subscription by " .. days .. " days",
                color = 16776960
            })
        end
    end
}

-- Webhook system
local webhookSystem = {
    queue = {},
    processing = false,
    formatTime = function(self, seconds)
        local hours = math.floor(seconds / 3600)
        local minutes = math.floor((seconds % 3600) / 60)
        local secs = math.floor(seconds % 60)
        if hours > 0 then return string.format("%d hours, %d minutes", hours, minutes)
        elseif minutes > 0 then return string.format("%d minutes, %d seconds", minutes, secs)
        else return string.format("%d seconds", secs) end
    end,
    send = function(self, embedData)
        if not getLocalStorage("notificationsEnabled", true) then return end
        table.insert(self.queue, embedData)
        if not self.processing then self:processQueue() end
    end,
    processQueue = function(self)
        if #self.queue == 0 then self.processing = false; return end
        self.processing = true
        local currentEmbed = table.remove(self.queue, 1)
        currentEmbed.footer = currentEmbed.footer or { text = "ComboChronicle Vault v" .. CONFIG.VERSION }
        currentEmbed.timestamp = currentEmbed.timestamp or os.date("!%Y-%m-%dT%H:%M:%SZ")
        spawn(function()
            local success = pcall(function()
                local http_request = syn and syn.request or http and http.request or request or httprequest
                local response = http_request({
                    Url = CONFIG.WEBHOOK_URL,
                    Method = "POST",
                    Headers = { ["Content-Type"] = "application/json" },
                    Body = HttpService:JSONEncode({ embeds = { currentEmbed } })
                })
                if not response or response.StatusCode >= 300 then
                    if not currentEmbed.retryCount or currentEmbed.retryCount < 3 then
                        currentEmbed.retryCount = (currentEmbed.retryCount or 0) + 1
                        table.insert(self.queue, currentEmbed)
                    end
                end
            end)
            wait(1)
            self:processQueue()
        end)
    end
}

-- Script loader system
local scriptSystem = {
    scripts = {
        [14518422161] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Hitbox%20Gunfight%20Arena",
        [155615604] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Prison%20Life",
        [7920018625] = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Nuke%20Tycoon%20Nuclear",
        [5223287266] = {
            "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Phoenix%20Grounds",
            "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Teleport%20Behind%20Player"
        }
    },
    defaultScript = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/Default",
    vipScript = "https://raw.githubusercontent.com/checkurasshole/Script/refs/heads/main/VIP_Exclusive",
    getScriptForGame = function(self, gameId) return self.scripts[gameId] or self.defaultScript end,
    loadScript = function(self, scriptUrl, notifyOnLoad)
        spawn(function()
            if notifyOnLoad then
                Rayfield:Notify({Title = "⏳ Loading", Content = "Loading script...", Duration = 2})
            end
            local success, errorMsg = pcall(function() loadstring(game:HttpGet(scriptUrl))() end)
            if success and notifyOnLoad then
                Rayfield:Notify({Title = "✅ Success", Content = "Script loaded!", Duration = 3})
            elseif not success then
                Rayfield:Notify({Title = "❌ Error", Content = "Script failed: " .. errorMsg, Duration = 5})
            end
        end)
    end,
    loadScriptSet = function(self, scriptSet, notifyOnLoad)
        if type(scriptSet) == "table" then
            for i, url in ipairs(scriptSet) do self:loadScript(url, notifyOnLoad and i == 1) end
        else
            self:loadScript(scriptSet, notifyOnLoad)
        end
    end
}

-- Challenge system
local challengeSystem = {
    challenges = {
        {id = "login_streak", name = "Login Streak", progress = 0, goal = 5, reward = "50 VC"},
        {id = "feedback_pro", name = "Feedback Pro", progress = 0, goal = 3, reward = "VIP Extension (1 day)"},
        {id = "script_usage", name = "Script Enthusiast", progress = 0, goal = 10, reward = "Exclusive Script"}
    },
    load = function(self)
        for i, challenge in ipairs(self.challenges) do
            self.challenges[i].progress = getLocalStorage("challenge_" .. challenge.id, 0)
        end
    end,
    save = function(self)
        for _, challenge in ipairs(self.challenges) do
            setLocalStorage("challenge_" .. challenge.id, challenge.progress)
        end
    end,
    updateProgress = function(self, challengeId, increment)
        for i, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId then
                self.challenges[i].progress = math.min(challenge.progress + (increment or 1), challenge.goal)
                self:save()
                if self.challenges[i].progress >= self.challenges[i].goal then return true end
                return false
            end
        end
    end,
    resetProgress = function(self, challengeId)
        for i, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId then
                self.challenges[i].progress = 0
                self:save()
                return true
            end
        end
    end,
    getFormattedText = function(self)
        local text = "🏆 Active Challenges 🏆\n\n"
        for _, challenge in ipairs(self.challenges) do
            local barLength = 10
            local filledBars = math.floor((challenge.progress / challenge.goal) * barLength)
            local progressBar = string.rep("■", filledBars) .. string.rep("□", barLength - filledBars)
            text = text .. challenge.name .. ":\n" .. progressBar .. " " .. challenge.progress .. "/" .. challenge.goal .. " (Reward: " .. challenge.reward .. ")\n\n"
        end
        return text
    end,
    awardReward = function(self, challengeId)
        for i, challenge in ipairs(self.challenges) do
            if challenge.id == challengeId and challenge.progress >= challenge.goal then
                if challenge.id == "feedback_pro" and subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                    subscriptionSystem:extendSubscription(LocalPlayer.UserId, 1)
                elseif challenge.id == "script_usage" then
                    scriptSystem:loadScript(scriptSystem.vipScript, true)
                end
                self:resetProgress(challengeId)
                return true
            end
        end
        return false
    end
}

-- News system
local newsSystem = {
    content = "Loading news...",
    lastUpdate = 0,
    formatNews = function(self, rawNews)
        if not rawNews or rawNews == "" then return "No news yet!" end
        local lines = {}
        for line in rawNews:gmatch("[^\n]+") do table.insert(lines, line) end
        local formatted = "✨ Vault Chronicle ✨\n════════════════════\n"
        for i, line in ipairs(lines) do
            if line:match("^NEWS:") then
                formatted = formatted .. "📰 " .. line:gsub("^NEWS:%s*", "") .. " 📰\n"
            else
                formatted = formatted .. "➤ " .. line .. "\n"
            end
            if i < #lines then formatted = formatted .. "────────────\n" end
        end
        formatted = formatted .. "════════════════════\nUpdated: " .. os.date("%Y-%m-%d %H:%M UTC")
        return formatted
    end,
    update = function(self)
        if (tick() - self.lastUpdate) < CONFIG.REFRESH_INTERVAL then return false end
        local success, news = safeHttpGet(CONFIG.NEWS_URL)
        if success then
            self.content = self:formatNews(news)
            self.lastUpdate = tick()
            return true
        end
        return false
    end
}

-- Initialize systems
subscriptionSystem:fetch()
challengeSystem:load()
newsSystem:update()
local lastFeedbackTime = getLocalStorage("lastFeedbackTime", 0)

-- Anti-tamper check
if not verifyIntegrity() then return end

-- Execution webhook
webhookSystem:send({
    title = "🚀 Script Execution",
    description = string.format("**%s%s** has launched the Vault", subscriptionSystem:isSubscribed(LocalPlayer.UserId) and CONFIG.VIP_PREFIX or "", LocalPlayer.DisplayName),
    color = 7419530,
    fields = {
        { name = "🔑 Hardware ID", value = "```" .. game:GetService("RbxAnalyticsService"):GetClientId() .. "```", inline = true },
        { name = "🎮 Game ID", value = "```" .. game.PlaceId .. "```", inline = true },
        { name = "📊 Version", value = "```" .. CONFIG.VERSION .. "```", inline = true }
    }
})

-- GUI Setup
local Window = Rayfield:CreateWindow({
    Name = "ComboChronicle Vault | NextGen v" .. CONFIG.VERSION,
    LoadingTitle = "Initializing Vault ❖",
    LoadingSubtitle = "By COMBO_WICK | Bang.E.Line",
    Theme = "Ocean"
})

-- Key & Credits Tab
local KeyTab = Window:CreateTab("🔑 Key & Credits", 4483362458)
local keyInput = KeyTab:CreateInput({
    Name = "Enter Key",
    PlaceholderText = "Type the key here...",
    RemoveTextAfterFocusLost = false,
    Callback = function(input)
        Rayfield:Notify({Title = "⏳ Checking", Content = "Verifying key...", Duration = 2})
        task.wait(0.7)
        if keySystem:verify(input) then
            Rayfield:Notify({Title = "✅ Success", Content = "Access granted! Loading scripts...", Duration = 3})
            challengeSystem:updateProgress("login_streak")
            local gameId = game.PlaceId
            local scriptToLoad = scriptSystem:getScriptForGame(gameId)
            task.wait(1)
            Rayfield:Destroy()
            scriptSystem:loadScriptSet(scriptToLoad, true)
        else
            Rayfield:Notify({Title = "❌ Invalid", Content = "Join Discord for the correct key!", Duration = 5, Image = 4483362458})
        end
    end
})
KeyTab:CreateButton({
    Name = "📋 Copy Links",
    Callback = function()
        setclipboard("Discord: discord.com/invite/mwTHaCKzhw\nYouTube: https://www.youtube.com/@COMBO_WICK")
        Rayfield:Notify({Title = "✅ Copied", Content = "Links copied!", Duration = 5})
    end
})
KeyTab:CreateParagraph({
    Title = "📢 Credits",
    Content = "Script by COMBO_WICK & Bang.E.Line\nVersion: " .. CONFIG.VERSION .. "\nEnhanced by xAI Grok\nEnjoy the Vault!"
})

-- Responses Tab
local ResponseTab = Window:CreateTab("📝 Responses", 4483362458)
local ResponseSection = ResponseTab:CreateSection("✉️ Message System")
local currentResponse = ""
ResponseTab:CreateInput({
    Name = "💭 Your Message",
    PlaceholderText = "Share your thoughts or report issues...",
    RemoveTextAfterFocusLost = false,
    Callback = function(text) currentResponse = text end
})
ResponseTab:CreateButton({
    Name = "📤 Submit Feedback",
    Info = "Send feedback to developers",
    Interact = "Submit",
    Callback = function()
        local currentTime = tick()
        local timeRemaining = CONFIG.FEEDBACK_COOLDOWN - (currentTime - lastFeedbackTime)
        if timeRemaining > 0 then
            Rayfield:Notify({Title = "⏳ Cooldown", Content = "Wait " .. webhookSystem:formatTime(timeRemaining), Duration = 5, Image = 4483362458})
            return
        end
        if currentResponse == "" then
            Rayfield:Notify({Title = "❌ Error", Content = "Please enter a message!", Duration = 3, Image = 4483362458})
            return
        end
        webhookSystem:send({
            title = "📨 New Feedback",
            description = currentResponse,
            color = 3447003,
            fields = {
                { name = "👤 User", value = LocalPlayer.DisplayName, inline = true },
                { name = "🆔 ID", value = tostring(LocalPlayer.UserId), inline = true },
                { name = "🎮 Game", value = tostring(game.PlaceId), inline = true }
            }
        })
        Rayfield:Notify({Title = "✅ Sent", Content = "Feedback delivered!", Duration = 5, Image = 4483362458})
        if challengeSystem:updateProgress("feedback_pro") then
            challengeSystem:awardReward("feedback_pro")
            Rayfield:Notify({Title = "🏆 Reward", Content = "Feedback Pro completed! +1 day VIP", Duration = 5})
        end
        lastFeedbackTime = currentTime
        setLocalStorage("lastFeedbackTime", lastFeedbackTime)
        currentResponse = ""
    end
})
ResponseTab:CreateLabel("⏰ Cooldown: 1h 15m")
ResponseTab:CreateLabel("💡 Report bugs or suggest features!")

-- News Tab
local NewsTab = Window:CreateTab("📰 News", 4483362458)
local newsParagraph = NewsTab:CreateParagraph({Title = "🗞️ Vault Updates", Content = newsSystem.content})
spawn(function()
    while wait(CONFIG.REFRESH_INTERVAL) do
        if newsSystem:update() then
            newsParagraph:Set({Title = "🗞️ Vault Updates", Content = newsSystem.content})
        end
    end
end

NewsTab:CreateButton({
    Name = "🔄 Refresh News",
    Callback = function()
        Rayfield:Notify({Title = "⏳ Updating", Content = "Fetching latest news...", Duration = 2})
        if newsSystem:update() then
            newsParagraph:Set({Title = "🗞️ Vault Updates", Content = newsSystem.content})
            Rayfield:Notify({Title = "✅ Updated", Content = "News refreshed!", Duration = 3})
        else
            Rayfield:Notify({Title = "❌ Failed", Content = "Could not fetch news.", Duration = 3})
        end
    end
})

-- Subscription Tab
local SubTab
if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
    SubTab = Window:CreateTab("⭐ Subscription", 4483362458)
    local subParagraph = SubTab:CreateParagraph({Title = "⭐ Vault Elite", Content = "Loading subscription details..."})
    local function updateSubStatus()
        if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
            local timeRemaining = subscriptionSystem:formatTimeRemaining(LocalPlayer.UserId)
            subParagraph:Set({
                Title = "⭐ Vault Elite",
                Content = "Status: ✅ Subscribed\n" ..
                          "Perks: Early updates, VIP scripts, Priority support, Custom badge\n" ..
                          "Expires in: " .. timeRemaining
            })
        else
            subParagraph:Set({
                Title = "⭐ Vault Elite",
                Content = "Status: ❌ Expired\nRenew to regain elite benefits!"
            })
        end
    end
    spawn(function()
        wait(1)
        updateSubStatus()
    end)
    spawn(function()
        while wait(60) do
            subscriptionSystem:fetch()
            updateSubStatus()
        end
    end)
    SubTab:CreateButton({
        Name = "🔗 Renew Subscription",
        Callback = function()
            setclipboard("discord.com/invite/mwTHaCKzhw")
            Rayfield:Notify({Title = "⭐ Subscription", Content = "Discord copied! Contact admins to renew.", Duration = 5})
        end
    })
    SubTab:CreateButton({
        Name = "🎩 Load VIP Script",
        Callback = function()
            if subscriptionSystem:isSubscribed(LocalPlayer.UserId) then
                scriptSystem:loadScript(scriptSystem.vipScript, true)
                if challengeSystem:updateProgress("script_usage") then
                    challengeSystem:awardReward("script_usage")
                    Rayfield:Notify({Title = "🏆 Reward", Content = "Script Enthusiast completed! Exclusive script loaded!", Duration = 5})
                end
            else
                Rayfield:Notify({Title = "❌ Access Denied", Content = "Subscription expired!", Duration = 5})
            end
        end
    })
    SubTab:CreateButton({
        Name = "🎖️ Boost Player (VIP)",
        Callback = function()
            if subscriptionSystem:isSubscribed(LocalPlayer.UserId) and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                local humanoid = LocalPlayer.Character.Humanoid
                humanoid.WalkSpeed = humanoid.WalkSpeed + 10
                humanoid.JumpPower = humanoid.JumpPower + 10
                Rayfield:Notify({Title = "🎖️ Boosted", Content = "Speed & Jump +10 for this session!", Duration = 5})
                webhookSystem:send({
                    title = "🎖️ VIP Boost Used",
                    description = LocalPlayer.DisplayName .. " activated a player boost",
                    color = 16711680
                })
            else
                Rayfield:Notify({Title = "❌ Failed", Content = "No character or subscription expired!", Duration = 5})
            end
        end
    })
    if not getLocalStorage("VIPBadgeShown", false) then
        wait(3)
        Rayfield:Notify({
            Title = "⭐ VIP Badge",
            Content = "Welcome, Vault Elite Member! Enjoy exclusive perks.",
            Duration = 10,
            Image = 4483362458
        })
        setLocalStorage("VIPBadgeShown", true)
    end
end

-- Challenges Tab
local ChallengeTab = Window:CreateTab("🏆 Challenges", 4483362458)
local challengeParagraph = ChallengeTab:CreateParagraph({Title = "🎯 Daily Goals", Content = challengeSystem:getFormattedText()})
ChallengeTab:CreateButton({
    Name = "🔄 Refresh Challenges",
    Callback = function()
        challengeParagraph:Set({Content = challengeSystem:getFormattedText()})
        Rayfield:Notify({Title = "🔄 Refreshed", Content = "Challenge progress updated!", Duration = 3})
    end
})
ChallengeTab:CreateButton({
    Name = "🎁 Claim Rewards",
    Callback = function()
        for _, challenge in ipairs(challengeSystem.challenges) do
            if challengeSystem:awardReward(challenge.id) then
                Rayfield:Notify({Title = "🎁 Claimed", Content = challenge.name .. " reward granted!", Duration = 5})
            end
        end
        challengeParagraph:Set({Content = challengeSystem:getFormattedText()})
    end
})

-- Settings Tab
local SettingsTab = Window:CreateTab("⚙️ Settings", 4483362458)
SettingsTab:CreateToggle({
    Name = "🔔 Notifications",
    CurrentValue = getLocalStorage("notificationsEnabled", true),
    Flag = "notificationsToggle",
    Callback = function(value)
        setLocalStorage("notificationsEnabled", value)
        Rayfield:Notify({Title = "⚙️ Settings", Content = value and "Notifications enabled" or "Notifications disabled", Duration = 3})
    end
})
SettingsTab:CreateToggle({
    Name = "🔄 Auto-Update Scripts",
    CurrentValue = getLocalStorage("autoUpdateEnabled", true),
    Flag = "autoUpdateToggle",
    Callback = function(value)
        setLocalStorage("autoUpdateEnabled", value)
        if value then
            local gameId = game.PlaceId
            local scriptToLoad = scriptSystem:getScriptForGame(gameId)
            scriptSystem:loadScriptSet(scriptToLoad, false)
        end
    end
})
SettingsTab:CreateButton({
    Name = "🗑️ Clear Cache",
    Callback = function()
        for _, attr in ipairs({"notificationsEnabled", "autoUpdateEnabled", "lastFeedbackTime", "VIPBadgeShown", "challenge_login_streak", "challenge_feedback_pro", "challenge_script_usage"}) do
            pcall(function() LocalPlayer:SetAttribute(attr, nil) end)
            pcall(function() vaultDataStore:RemoveAsync(LocalPlayer.UserId .. "_" .. attr) end)
        end
        Rayfield:Notify({Title = "🧹 Cleaned", Content = "Cache cleared! Restart to apply.", Duration = 5})
    end
})
SettingsTab:CreateButton({
    Name = "♻️ Restart Vault",
    Callback = function()
        Rayfield:Notify({Title = "⏳ Restarting", Content = "Reloading Vault...", Duration = 3})
        wait(1)
        Rayfield:Destroy()
        -- Placeholder for full script reload (requires external hosting)
        -- loadstring(game:HttpGet('your_script_url_here'))()
    end
})
SettingsTab:CreateButton({
    Name = "📡 Sync Data",
    Callback = function()
        subscriptionSystem:fetch()
        newsSystem:update()
        challengeSystem:load()
        Rayfield:Notify({Title = "📡 Synced", Content = "Data synchronized with server!", Duration = 5})
        updateSubStatus()
        newsParagraph:Set({Content = newsSystem.content})
        challengeParagraph:Set({Content = challengeSystem:getFormattedText()})
    end
})

-- Auto-update scripts if enabled
if getLocalStorage("autoUpdateEnabled", true) then
    spawn(function()
        while wait(300) do -- Every 5 minutes
            local gameId = game.PlaceId
            local scriptToLoad = scriptSystem:getScriptForGame(gameId)
            scriptSystem:loadScriptSet(scriptToLoad, false)
        end
    end)
end

-- Finalize
print("ComboChronicle Vault NextGen v" .. CONFIG.VERSION .. " loaded successfully!")
