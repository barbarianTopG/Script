-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")

-- Constants
local DISPLAY_DISTANCE = 1000 -- Maximum distance to show ESP
local UPDATE_INTERVAL = 0.1 -- How often to update ESP info (seconds)
local LOCAL_PLAYER = Players.LocalPlayer
local TEAM_COLORS = {
    Enemy = Color3.fromRGB(255, 0, 0),    -- Red
    Friendly = Color3.fromRGB(0, 255, 0)  -- Green
}

-- Configuration
local Config = {
    Enabled = true,
    ShowName = true,
    ShowHealth = true,
    ShowDistance = true,
    ShowTeam = true,
    ShowBoxes = true,
    ShowTracers = true,
    RainbowMode = false,
    MaxDistance = DISPLAY_DISTANCE,
    TextSize = 14,
    TextFont = Enum.Font.Code,
    BoxesEnabled = true,
    TracersEnabled = true,
    HighlightEnabled = true
}

-- Create a container for all ESP elements
local ESPContainer = Instance.new("Folder")
ESPContainer.Name = "ESPContainer"
ESPContainer.Parent = CoreGui

-- Utility Functions
local Utility = {
    -- Calculate distance between two Vector3 positions
    GetDistance = function(position1, position2)
        return (position1 - position2).Magnitude
    end,
    
    -- Format distance to be more readable
    FormatDistance = function(distance)
        return string.format("%.1f", distance)
    end,
    
    -- Get health percentage and color
    GetHealthData = function(humanoid)
        if not humanoid or not humanoid.Parent then return {Percentage = 0, Color = Color3.new(1,0,0), Text = "No HP"} end
        
        local health = humanoid.Health
        local maxHealth = humanoid.MaxHealth
        local percentage = (health / maxHealth) * 100
        
        -- Color gradient from red to green based on health
        local color = Color3.fromRGB(
            255 * (1 - health / maxHealth),
            255 * (health / maxHealth),
            0
        )
        
        return {
            Percentage = percentage,
            Color = color,
            Text = string.format("%.0f/%.0f HP", health, maxHealth)
        }
    end,
    
    -- Check if a player is on the same team
    IsTeamMate = function(player)
        if player.Team and LOCAL_PLAYER.Team then
            return player.Team == LOCAL_PLAYER.Team
        end
        return false
    end,
    
    -- Generate rainbow color
    RainbowColor = function()
        local time = tick() * 2
        return Color3.fromHSV(time % 1, 1, 1)
    end,
    
    -- Get player's character safely
    GetCharacter = function(player)
        return player.Character or player.CharacterAdded:Wait()
    end
}

-- ESP Class
local ESP = {
    Objects = {},
    Connections = {},
    CharacterConnections = {}
}

-- Handle character changes (respawn, etc.)
function ESP:SetupCharacterConnections(player)
    -- Clear any existing connections
    if self.CharacterConnections[player] then
        self.CharacterConnections[player]:Disconnect()
    end
    
    -- Create new connection
    self.CharacterConnections[player] = player.CharacterAdded:Connect(function(character)
        -- Wait a brief moment for character to load
        task.wait(0.5)
        
        -- If ESP exists for this player, update the character reference
        if self.Objects[player] then
            local espData = self.Objects[player]
            
            -- Update highlight adornee
            if espData.Highlight then
                espData.Highlight.Adornee = character
                espData.Highlight.Enabled = Config.Enabled
            end
            
            -- Find the humanoid root part for billboard positioning
            local rootPart = character:WaitForChild("HumanoidRootPart", 3)
            if rootPart and espData.BillboardGui then
                espData.BillboardGui.Adornee = rootPart
                espData.BillboardGui.Enabled = Config.Enabled
            end
        else
            -- If player doesn't have ESP yet (shouldn't happen, but just in case)
            self:CreatePlayerESP(player)
        end
    end)
end

-- Initialize ESP for a player
function ESP:CreatePlayerESP(player)
    if player == LOCAL_PLAYER then return end
    
    -- Create folder for this player's ESP
    local playerESPFolder = Instance.new("Folder")
    playerESPFolder.Name = player.Name .. "_ESPElements"
    playerESPFolder.Parent = ESPContainer
    
    -- Create highlight
    local highlight = Instance.new("Highlight")
    highlight.Name = player.Name .. "_ESP"
    highlight.FillColor = TEAM_COLORS.Enemy
    highlight.OutlineColor = Color3.new(1, 1, 1)
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Enabled = Config.Enabled
    highlight.Parent = playerESPFolder
    
    -- Create ESP text container
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = player.Name .. "_Info"
    billboardGui.AlwaysOnTop = true
    billboardGui.Size = UDim2.new(0, 200, 0, 100)
    billboardGui.StudsOffset = Vector3.new(0, 3, 0)
    billboardGui.Enabled = Config.Enabled
    billboardGui.Parent = playerESPFolder
    
    -- Create text labels
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Name = "NameLabel"
    nameLabel.Size = UDim2.new(1, 0, 0, 20)
    nameLabel.Position = UDim2.new(0, 0, 0, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextSize = Config.TextSize
    nameLabel.Font = Config.TextFont
    nameLabel.Parent = billboardGui
    
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Name = "HealthLabel"
    healthLabel.Size = UDim2.new(1, 0, 0, 20)
    healthLabel.Position = UDim2.new(0, 0, 0, 20)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.new(1, 1, 1)
    healthLabel.TextSize = Config.TextSize
    healthLabel.Font = Config.TextFont
    healthLabel.Parent = billboardGui
    
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Name = "DistanceLabel"
    distanceLabel.Size = UDim2.new(1, 0, 0, 20)
    distanceLabel.Position = UDim2.new(0, 0, 0, 40)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.new(1, 1, 1)
    distanceLabel.TextSize = Config.TextSize
    distanceLabel.Font = Config.TextFont
    distanceLabel.Parent = billboardGui
    
    -- Try to get current character or wait for it
    local character = player.Character or player.CharacterAdded:Wait()
    highlight.Adornee = character
    
    -- Try to get HumanoidRootPart or wait for it
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then
        rootPart = character:WaitForChild("HumanoidRootPart", 3)
    end
    
    if rootPart then
        billboardGui.Adornee = rootPart
    end
    
    -- Store ESP objects
    self.Objects[player] = {
        Highlight = highlight,
        BillboardGui = billboardGui,
        Container = playerESPFolder,
        Labels = {
            Name = nameLabel,
            Health = healthLabel,
            Distance = distanceLabel
        }
    }
    
    -- Setup character connections for respawn handling
    self:SetupCharacterConnections(player)
    
    -- Update ESP function
    local function updateESP()
        if not Config.Enabled then return end
        
        -- Get the current character
        local character = player.Character
        if not character then return end
        
        local humanoid = character:FindFirstChild("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        
        if not rootPart then return end
        
        -- Ensure highlight is properly set
        highlight.Adornee = character
        highlight.Enabled = Config.Enabled and Config.HighlightEnabled
        
        -- Ensure billboard is properly set
        billboardGui.Adornee = rootPart
        
        -- Calculate distance
        local localCharacter = LOCAL_PLAYER.Character
        local localRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
        
        local distance = localRootPart and 
            Utility.GetDistance(localRootPart.Position, rootPart.Position) or 0
        
        -- Check if within display range
        if distance > Config.MaxDistance then
            billboardGui.Enabled = false
            highlight.Enabled = false
            return
        end
        
        -- Update visibility
        billboardGui.Enabled = Config.Enabled
        highlight.Enabled = Config.Enabled and Config.HighlightEnabled
        
        -- Update highlight colors
        if Config.RainbowMode then
            highlight.FillColor = Utility.RainbowColor()
        else
            highlight.FillColor = Utility.IsTeamMate(player) and TEAM_COLORS.Friendly or TEAM_COLORS.Enemy
        end
        
        -- Update health data
        local healthData = Utility.GetHealthData(humanoid)
        
        -- Update labels
        if Config.ShowName then
            nameLabel.Text = player.Name
            nameLabel.Visible = true
        else
            nameLabel.Visible = false
        end
        
        if Config.ShowHealth then
            healthLabel.Text = healthData.Text
            healthLabel.TextColor3 = healthData.Color
            healthLabel.Visible = true
        else
            healthLabel.Visible = false
        end
        
        if Config.ShowDistance then
            distanceLabel.Text = Utility.FormatDistance(distance) .. " studs"
            distanceLabel.Visible = true
        else
            distanceLabel.Visible = false
        end
    end
    
    -- Connect update function
    local connection = RunService.Heartbeat:Connect(updateESP)
    self.Connections[player] = connection
end

-- Remove ESP for a player
function ESP:RemovePlayerESP(player)
    -- Disconnect character connections
    if self.CharacterConnections[player] then
        self.CharacterConnections[player]:Disconnect()
        self.CharacterConnections[player] = nil
    end
    
    -- Disconnect update connections
    if self.Connections[player] then
        self.Connections[player]:Disconnect()
        self.Connections[player] = nil
    end
    
    -- Destroy ESP objects
    local espData = self.Objects[player]
    if espData then
        if espData.Container then
            espData.Container:Destroy()
        else
            -- Fallback if container doesn't exist for some reason
            if espData.Highlight then espData.Highlight:Destroy() end
            if espData.BillboardGui then espData.BillboardGui:Destroy() end
        end
    end
    
    self.Objects[player] = nil
end

-- Initialize ESP system
function ESP:Init()
    -- Setup ESP for existing players
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LOCAL_PLAYER then
            self:CreatePlayerESP(player)
        end
    end
    
    -- Handle new players
    Players.PlayerAdded:Connect(function(player)
        self:CreatePlayerESP(player)
    end)
    
    -- Handle players leaving
    Players.PlayerRemoving:Connect(function(player)
        self:RemovePlayerESP(player)
    end)
    
    -- Toggle ESP with Right Control key
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.RightControl then
            Config.Enabled = not Config.Enabled
            
            -- Update visibility of all ESP elements
            for _, espData in pairs(self.Objects) do
                if espData.Highlight then
                    espData.Highlight.Enabled = Config.Enabled and Config.HighlightEnabled
                end
                if espData.BillboardGui then
                    espData.BillboardGui.Enabled = Config.Enabled
                end
            end
            
            -- Notification of ESP toggle
            game.StarterGui:SetCore("SendNotification", {
                Title = "ESP " .. (Config.Enabled and "Enabled" or "Disabled"),
                Text = "Press Right Control to toggle",
                Duration = 2
            })
        elseif input.KeyCode == Enum.KeyCode.RightAlt then
            -- Toggle Rainbow Mode
            Config.RainbowMode = not Config.RainbowMode
            game.StarterGui:SetCore("SendNotification", {
                Title = "Rainbow Mode " .. (Config.RainbowMode and "Enabled" or "Disabled"),
                Text = "Press Right Alt to toggle",
                Duration = 2
            })
        end
    end)
    
    -- Create configuration GUI
    self:CreateConfigGUI()
    
    -- Notification that ESP is running
    game.StarterGui:SetCore("SendNotification", {
        Title = "ESP Loaded",
        Text = "Press Right Control to toggle",
        Duration = 3
    })
end

-- Create a simple configuration GUI
function ESP:CreateConfigGUI()
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "ESPConfig"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = CoreGui
    
    -- Create main frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 200, 0, 220)
    mainFrame.Position = UDim2.new(0, 10, 0.5, -100)
    mainFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    mainFrame.BorderSizePixel = 2
    mainFrame.BorderColor3 = Color3.fromRGB(60, 60, 60)
    mainFrame.Visible = false
    mainFrame.Parent = screenGui
    
    -- Create title
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "TitleLabel"
    titleLabel.Size = UDim2.new(1, 0, 0, 30)
    titleLabel.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    titleLabel.BorderSizePixel = 0
    titleLabel.Text = "ESP Configuration"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.SourceSansBold
    titleLabel.TextSize = 16
    titleLabel.Parent = mainFrame
    
    -- Create options container
    local optionsFrame = Instance.new("Frame")
    optionsFrame.Name = "OptionsFrame"
    optionsFrame.Size = UDim2.new(1, 0, 1, -30)
    optionsFrame.Position = UDim2.new(0, 0, 0, 30)
    optionsFrame.BackgroundTransparency = 1
    optionsFrame.Parent = mainFrame
    
    -- Helper function to create toggle buttons
    local function createToggle(name, property, position)
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Name = name .. "Frame"
        toggleFrame.Size = UDim2.new(1, -20, 0, 25)
        toggleFrame.Position = UDim2.new(0, 10, 0, position)
        toggleFrame.BackgroundTransparency = 1
        toggleFrame.Parent = optionsFrame
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Name = "Label"
        toggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = name
        toggleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleLabel.Font = Enum.Font.SourceSans
        toggleLabel.TextSize = 14
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.Parent = toggleFrame
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Name = "Button"
        toggleButton.Size = UDim2.new(0.3, 0, 1, 0)
        toggleButton.Position = UDim2.new(0.7, 0, 0, 0)
        toggleButton.BackgroundColor3 = Config[property] and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(255, 50, 50)
        toggleButton.Text = Config[property] and "ON" or "OFF"
        toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        toggleButton.Font = Enum.Font.SourceSansBold
        toggleButton.TextSize = 14
        toggleButton.Parent = toggleFrame
        
        toggleButton.MouseButton1Click:Connect(function()
            Config[property] = not Config[property]
            toggleButton.BackgroundColor3 = Config[property] and Color3.fromRGB(0, 255, 100) or Color3.fromRGB(255, 50, 50)
            toggleButton.Text = Config[property] and "ON" or "OFF"
        end)
    end
    
    -- Create toggle options
    createToggle("Show Names", "ShowName", 10)
    createToggle("Show Health", "ShowHealth", 40)
    createToggle("Show Distance", "ShowDistance", 70)
    createToggle("Show Boxes", "BoxesEnabled", 100)
    createToggle("Show Tracers", "TracersEnabled", 130)
    createToggle("Rainbow Mode", "RainbowMode", 160)
    
    -- Toggle config GUI with F4 key
    UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.F4 then
            mainFrame.Visible = not mainFrame.Visible
        end
    end)
end

-- Cleanup function
function ESP:Cleanup()
    -- Remove all ESP objects
    for player, _ in pairs(self.Objects) do
        self:RemovePlayerESP(player)
    end
    
    -- Disconnect all connections
    for _, connection in pairs(self.Connections) do
        connection:Disconnect()
    end
    
    for _, connection in pairs(self.CharacterConnections) do
        connection:Disconnect()
    end
    
    -- Remove container
    if ESPContainer then
        ESPContainer:Destroy()
    end
    
    -- Notification that ESP was unloaded
    game.StarterGui:SetCore("SendNotification", {
        Title = "ESP Unloaded",
        Text = "ESP has been cleaned up",
        Duration = 2
    })
end

-- Initialize the ESP system
ESP:Init()

-- Cleanup on script end
game:BindToClose(function()
    ESP:Cleanup()
end)
