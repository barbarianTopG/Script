local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "ComboChronicle Vault | State Of Anarchy",
    Icon = 12345678901, --  diamond icon ID? 
    LoadingTitle = "Loading ComboChronicle Vault ❖",
    LoadingSubtitle = "By COMBO_WICK | Bang.E.Line",
    Theme = "Ocean"
})

-- Store death and kill position variables
local lastDeathPosition = nil
local lastKillPosition = nil
local targetPlayerPosition = nil
local isTeleportingToDeath = false
local isTeleportingToKill = false
local teleportDistance = 10  -- Distance in front of the local player to teleport others
local teleporting = false  -- Toggle for continuous teleportation
local checkInterval = 0.5  -- Time between teleportation checks (reduce this value if you need faster checks)

local espEnabled = false  -- Toggle for ESP
local selectedBox = nil
local availableBoxes = {}

-- Function to teleport to a specified position
local function teleportToPosition(position)
    local player = game.Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(position)
    end
end

-- Function to store death position
local function onDeath(character)
    if character and character:FindFirstChild("HumanoidRootPart") then
        lastDeathPosition = character.HumanoidRootPart.Position
    end
end

-- Function to store the position of the player you killed
local function onPlayerKilled(killer, victim)
    if killer == game.Players.LocalPlayer and victim.Character then
        if victim.Character:FindFirstChild("HumanoidRootPart") then
            lastKillPosition = victim.Character.HumanoidRootPart.Position
        end
    end
end

-- Function to teleport to the last death position
local function teleportToDeathPosition()
    if lastDeathPosition then
        teleportToPosition(lastDeathPosition)
    else
        warn("No death position recorded")
    end
end

-- Function to teleport to the last player kill position
local function teleportToKillPosition()
    if lastKillPosition then
        teleportToPosition(lastKillPosition)
    else
        warn("No kill position recorded")
    end
end

-- Connect functions to the necessary events

-- Listen for your death
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function()
        onDeath(character)  -- Store death position when you die
    end)
end)

-- Listen for when a player kills another player
game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.Died:Connect(function()
                onPlayerKilled(game.Players.LocalPlayer, player)  -- Store kill position when you kill someone
            end)
        end)
    end
end)

-- ESP Logic
local function addESP(character)
    if character and character:FindFirstChild("Head") then
        if not character:FindFirstChild("ESP_Highlight") then
            local highlight = Instance.new("Highlight")
            highlight.Name = "ESP_Highlight"
            highlight.Adornee = character
            highlight.FillColor = Color3.new(0, 1, 0) -- Green color
            highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlight.Parent = character
        end
    end
end

local function removeESP(character)
    local highlight = character:FindFirstChild("ESP_Highlight")
    if highlight then
        highlight:Destroy()
    end
end

-- Function to teleport players
local function teleportMovingPlayers()
    local localPlayer = game.Players.LocalPlayer
    local character = localPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        local camera = workspace.CurrentCamera
        local cameraDirection = camera.CFrame.LookVector
        local cameraPosition = camera.CFrame.Position
        
        -- Loop through all players and teleport them if they're moving
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= localPlayer then
                local targetCharacter = player.Character
                local humanoid = targetCharacter:FindFirstChild("Humanoid")
                local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                
                -- Ensure the player has a humanoid and is moving
                if targetRootPart and humanoid and humanoid.MoveDirection.magnitude > 0 then
                    -- Calculate the new position directly in front of the local player
                    local newPosition = cameraPosition + cameraDirection * teleportDistance
                    
                    -- Use Raycast to check and correct the Y position (for grounding)
                    local ray = Ray.new(newPosition, Vector3.new(0, -10, 0))  -- Check downwards for ground
                    local hit, hitPosition = workspace:FindPartOnRay(ray, targetCharacter)
                    
                    -- Set the new position of the player
                    if hit then
                        targetRootPart.CFrame = CFrame.new(hitPosition.X, hitPosition.Y, hitPosition.Z)
                    else
                        -- Default position if no ground found
                        targetRootPart.CFrame = CFrame.new(newPosition)
                    end
                    
                    -- Remove any BodyGyros or other constraints that may interfere with player interaction
                    for _, v in pairs(targetCharacter:GetChildren()) do
                        if v:IsA("BodyGyro") or v:IsA("BodyPosition") then
                            v:Destroy()
                        end
                    end

                    -- Prevent them from being teleported back to their original position
                    targetCharacter:MoveTo(hitPosition or newPosition)
                    
                    -- Anchor the player to prevent floating
                    targetRootPart.Anchored = true
                    
                    -- Allow the player to interact (e.g., get damaged or killed) after teleporting
                    if humanoid then
                        humanoid.PlatformStand = false  -- Ensure the humanoid is not locked in place
                    end

                    -- Ensure collision is enabled for the player after teleportation
                    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                end
            end
        end
    end
end

-- Monitor all existing players for ESP
local function monitorPlayer(player)
    -- Add ESP to the current character
    if player.Character then
        addESP(player.Character)
    end

    -- Add ESP when the character respawns
    player.CharacterAdded:Connect(function(character)
        addESP(character)
    end)
end

-- Monitor new players joining
game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        monitorPlayer(player)
    end
end)

-- Function to find all valid teleportable objects (box, crate, case, container, etc.)
local function updateBoxList()
    availableBoxes = {}
    
    -- Search through the workspace for any objects that may be boxes, crates, cases, etc.
    for _, obj in pairs(game.Workspace:GetDescendants()) do
        -- Only consider Parts, MeshParts, or Models
        if obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("Model") then
            -- Check if the object name contains 'box', 'crate', 'case', or 'container'
            local lowerName = obj.Name:lower()  -- Convert name to lowercase for case insensitivity
            if lowerName:find("box") or lowerName:find("crate") or lowerName:find("case") or lowerName:find("container") then
                -- Add the object to the list of available boxes
                table.insert(availableBoxes, obj.Name)
            end
        end
    end
    
    -- Check if no boxes were found
    if #availableBoxes == 0 then
        warn("No valid boxes or crates found in the workspace.")
    end
end

-- Function to teleport the player to the selected box(Beta as hell)
local function teleportToBox()
    if selectedBox then
        local targetObject = nil
        
        -- Find the object by name in the workspace
        for _, obj in pairs(game.Workspace:GetDescendants()) do
            if obj.Name == selectedBox and (obj:IsA("Part") or obj:IsA("MeshPart") or obj:IsA("Model")) then
                targetObject = obj
                break
            end
        end
        
        if targetObject then
            local player = game.Players.LocalPlayer
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local teleportPosition = nil

                -- Determine the correct teleport position based on the object type (Model/Part)
                if targetObject:IsA("Model") then
                    -- If it's a model, use the WorldPivot if no PrimaryPart exists
                    if targetObject.PrimaryPart then
                        teleportPosition = targetObject.PrimaryPart.Position
                    elseif targetObject:FindFirstChild("WorldPivot") then
                        -- Use the WorldPivot for models that lack a PrimaryPart
                        teleportPosition = targetObject.WorldPivot.Position
                    else
                        -- If no PrimaryPart and no WorldPivot, find the first Part inside the Model
                        for _, child in pairs(targetObject:GetChildren()) do
                            if child:IsA("Part") or child:IsA("MeshPart") then
                                teleportPosition = child.Position
                                break
                            end
                        end
                    end
                elseif targetObject:IsA("Part") or targetObject:IsA("MeshPart") then
                    -- If it's a Part or MeshPart, use its position directly
                    teleportPosition = targetObject.Position
                end
                
                -- Now teleport the player to the object
                if teleportPosition then
                    -- Adjust the teleport position to account for the player's height (avoiding clipping)
                    player.Character.HumanoidRootPart.CFrame = CFrame.new(teleportPosition + Vector3.new(0, 3, 0)) -- Slightly lift player
                else
                    warn("Could not find a valid position for the selected box.")
                end
            else
                warn("Player's character is missing the HumanoidRootPart.")
            end
        else
            warn("Selected box not found in the workspace!")
        end
    else
        warn("No box selected!")
    end
end

-- Create teleport buttons for GUI

local mainTab = Window:CreateTab("Main", 4483362458)
mainTab:CreateButton({
    Name = "Teleport to Last Death Position",
    Callback = function()
        teleportToDeathPosition()
    end,
})

-- Button to teleport to the last killed player's position
mainTab:CreateButton({
    Name = "Teleport to Last Killed Player's Position",
    Callback = function()
        teleportToKillPosition()
    end,
})

-- Toggle switch for continuous teleportation and ESP
local toggleButton = mainTab:CreateToggle({
    Name = "Teleport Every Player One Place(Kill-All)",
    CurrentValue = teleporting,
    Callback = function(value)
        teleporting = value
        if teleporting then
            -- Start teleportation checks with a delay
            while teleporting do
                teleportMovingPlayers()
                wait(checkInterval)  -- Reduced check frequency
            end
        end
    end,
})

local espToggleButton = mainTab:CreateToggle({
    Name = "Toggle ESP",
    CurrentValue = espEnabled,
    Callback = function(value)
        espEnabled = value
        -- Enable or disable ESP for all players
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                if espEnabled then
                    addESP(player.Character)
                else
                    removeESP(player.Character)
                end
            end
            player.CharacterAdded:Connect(function(character)
                if espEnabled then
                    addESP(character)
                else
                    removeESP(character)
                end
            end)
        end
    end
})

local Label = mainTab:CreateLabel("NOTE: Teleportation to boxes are currently down Trying to fix tht", 4483362458, Color3.fromRGB(255, 0, 0), false) -- Title, Icon, Color, IgnoreTheme

local dropdown = mainTab:CreateDropdown({
    Name = "Select a Box/Crate",
    Options = availableBoxes,
    Callback = function(selected)
        selectedBox = selected
    end,
})

-- Create Button to teleport to selected box
mainTab:CreateButton({
    Name = "Teleport to Selected Box",
    Callback = function()
        teleportToBox()
    end,
})

-- Create Button to manually refresh the list of available boxes
mainTab:CreateButton({
    Name = "Refresh Box List",
    Callback = function()
        updateBoxList()
        dropdown:Refresh(availableBoxes, selectedBox)
    end,
})

-- Initial box list update (on script startup)
updateBoxList()

-- Add a check to update the player positions every few seconds to avoid teleportation errors
task.spawn(function()
    while task.wait(1) do
        -- Continuously check if death or kill positions need updating
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            -- Ensure the last death position is updated every time you respawn
            if player.Character.Humanoid.Health <= 0 then
                onDeath(player.Character)  -- Update death position if character dies
            end

            -- Ensure the kill position is updated when a player dies
            for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                if otherPlayer.Character and otherPlayer.Character.Humanoid.Health <= 0 then
                    onPlayerKilled(player, otherPlayer)  -- Update kill position when you kill another player
                end
            end
        end
    end
end)

-- Continuously check for any missed players or characters for ESP
task.spawn(function()
    while task.wait(1) do
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                if espEnabled then
                    addESP(player.Character)
                else
                    removeESP(player.Character)
                end
            end
        end
    end
end)

-- Continuously monitor for teleportation
game:GetService("RunService").Heartbeat:Connect(function()
    if teleporting then
        teleportMovingPlayers()
    end
end)

-- Credits Tab
local CreditsTab = Window:CreateTab("✨ Credits", "info")
local CreatorSection = CreditsTab:CreateSection("👑 Creator")
CreditsTab:CreateLabel("🛠️ COMBO_WICK - Discord: world_star_hacker")
local CoDevSection = CreditsTab:CreateSection("🤝 Co-Developer")
CreditsTab:CreateLabel("💡 None - Discord: None")
local DiscordSection = CreditsTab:CreateSection("🌐 Discord Server")
CreditsTab:CreateLabel("🔗 Join our server: discord.com/invite/mwTHaCKzhw")
CreditsTab:CreateButton({
   Name = "📋 Copy Discord Link/Youtube",
   Callback = function()
      local links = "Discord: discord.com/invite/mwTHaCKzhw\nYouTube: https://www.youtube.com/@COMBO_WICK"
      setclipboard(links)
   end,
})
