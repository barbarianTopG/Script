local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "ComboChronicle Vault | State Of Anarchy",
    Icon = 12345678901,
    LoadingTitle = "Loading ComboChronicle Vault ❖",
    LoadingSubtitle = "By COMBO_WICK | Bang.E.Line",
    Theme = "Ocean"
})

local lastDeathPosition = nil
local lastKillPosition = nil
local teleportDistance = 10
local teleporting = false
local checkInterval = 0.5
local espEnabled = false
local containersList = {}
local buildingsFolder = game.Workspace:FindFirstChild("ChunkingSystem") and game.Workspace.ChunkingSystem:FindFirstChild("Buildings")

local function reliableTeleport(targetCFrame, maxAttempts)
    local player = game.Players.LocalPlayer
    if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then return end
    maxAttempts = maxAttempts or 5
    local attempts = 0
    local humanoidRootPart = player.Character.HumanoidRootPart
    humanoidRootPart.CFrame = targetCFrame + Vector3.new(0, 5, 0)
    local function attemptTeleport()
        if attempts >= maxAttempts then return end
        attempts = attempts + 1
        task.spawn(function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                if attempts % 2 == 0 then
                    humanoidRootPart.CFrame = targetCFrame + Vector3.new(0, 5, 0)
                    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                else
                    player.Character:MoveTo(targetCFrame.Position + Vector3.new(0, 5, 0))
                    task.wait(0.05)
                    humanoidRootPart.CFrame = targetCFrame + Vector3.new(0, 5, 0)
                end
                if attempts < maxAttempts and (humanoidRootPart.Position - targetCFrame.Position).Magnitude > 2 then
                    task.delay(0.1, attemptTeleport)
                end
            end
        end)
    end
    task.delay(0.1, attemptTeleport)
end

local function onDeath(character)
    if character and character:FindFirstChild("HumanoidRootPart") then
        lastDeathPosition = character.HumanoidRootPart.Position
    end
end

local function onPlayerKilled(killer, victim)
    if killer == game.Players.LocalPlayer and victim.Character and victim.Character:FindFirstChild("HumanoidRootPart") then
        lastKillPosition = victim.Character.HumanoidRootPart.Position
    end
end

local function teleportToDeathPosition()
    if lastDeathPosition then reliableTeleport(CFrame.new(lastDeathPosition)) else warn("No death position recorded") end
end

local function teleportToKillPosition()
    if lastKillPosition then reliableTeleport(CFrame.new(lastKillPosition)) else warn("No kill position recorded") end
end

game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.Died:Connect(function() onDeath(character) end)
end)

game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            local humanoid = character:WaitForChild("Humanoid")
            humanoid.Died:Connect(function() onPlayerKilled(game.Players.LocalPlayer, player) end)
        end)
    end
end)

local function addESP(character)
    if character and character:FindFirstChild("Head") and not character:FindFirstChild("ESP_Highlight") then
        local highlight = Instance.new("Highlight")
        highlight.Name = "ESP_Highlight"
        highlight.Adornee = character
        highlight.FillColor = Color3.new(0, 1, 0)
        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        highlight.Parent = character
    end
end

local function removeESP(character)
    local highlight = character:FindFirstChild("ESP_Highlight")
    if highlight then highlight:Destroy() end
end

local function teleportMovingPlayers()
    local localPlayer = game.Players.LocalPlayer
    local character = localPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        local camera = workspace.CurrentCamera
        local cameraDirection = camera.CFrame.LookVector
        local cameraPosition = camera.CFrame.Position
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= localPlayer then
                local targetCharacter = player.Character
                local humanoid = targetCharacter:FindFirstChild("Humanoid")
                local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")
                if targetRootPart and humanoid and humanoid.MoveDirection.Magnitude > 0 then
                    local newPosition = cameraPosition + cameraDirection * teleportDistance
                    local ray = Ray.new(newPosition, Vector3.new(0, -10, 0))
                    local hit, hitPosition = workspace:FindPartOnRay(ray, targetCharacter)
                    targetRootPart.CFrame = CFrame.new(hitPosition or newPosition)
                    targetCharacter:MoveTo(hitPosition or newPosition)
                    targetRootPart.Anchored = true
                    humanoid.PlatformStand = false
                    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
                end
            end
        end
    end
end

game.Players.PlayerAdded:Connect(function(player)
    if player ~= game.Players.LocalPlayer then
        if player.Character then addESP(player.Character) end
        player.CharacterAdded:Connect(function(character)
            if espEnabled then addESP(character) else removeESP(character) end
        end)
    end
end)

local function updateContainersList()
    containersList = {}
    local containersInfo = {}
    local seenFullNames = {}
    if buildingsFolder then
        for _, building in pairs(buildingsFolder:GetChildren()) do
            local containerFolder = building:FindFirstChild("containers")
            local buildingContainers = {}
            if containerFolder then
                for _, container in pairs(containerFolder:GetChildren()) do
                    local fullName = building.Name .. " - " .. container.Name
                    if not seenFullNames[fullName] then
                        seenFullNames[fullName] = true
                        table.insert(buildingContainers, {
                            name = container.Name,
                            building = building.Name,
                            fullName = fullName,
                            instance = container
                        })
                    end
                end
            end
            for _, obj in pairs(building:GetDescendants()) do
                local lowerName = obj.Name:lower()
                if (obj:IsA("BasePart") or obj:IsA("Model")) and 
                   (lowerName:find("crate") or lowerName:find("box") or lowerName:find("weapon") or lowerName:find("container")) then
                    local fullName = building.Name .. " - " .. obj.Name
                    if not seenFullNames[fullName] then
                        seenFullNames[fullName] = true
                        table.insert(buildingContainers, {
                            name = obj.Name,
                            building = building.Name,
                            fullName = fullName,
                            instance = obj
                        })
                    end
                end
            end
            if #buildingContainers > 0 then
                table.sort(buildingContainers, function(a, b) return a.name:lower() < b.name:lower() end)
                table.insert(containersInfo, {
                    building = building.Name,
                    containers = buildingContainers
                })
            end
        end
    end
    local worldContainers = {}
    for _, obj in pairs(game.Workspace:GetDescendants()) do
        local lowerName = obj.Name:lower()
        if (obj:IsA("BasePart") or obj:IsA("Model")) and 
           (lowerName:find("crate") or lowerName:find("box") or lowerName:find("weapon") or lowerName:find("container")) then
            local fullName = "World - " .. obj.Name
            if not seenFullNames[fullName] then
                seenFullNames[fullName] = true
                table.insert(worldContainers, {
                    name = obj.Name,
                    building = "World",
                    fullName = fullName,
                    instance = obj
                })
            end
        end
    end
    if #worldContainers > 0 then
        table.sort(worldContainers, function(a, b) return a.name:lower() < b.name:lower() end)
        table.insert(containersInfo, {
            building = "World",
            containers = worldContainers
        })
    end
    table.sort(containersInfo, function(a, b) return a.building:lower() < b.building:lower() end)
    for _, info in pairs(containersInfo) do
        for _, container in pairs(info.containers) do
            table.insert(containersList, container.fullName)
        end
    end
    return containersInfo
end

local function findContainerByFullName(fullName)
    local buildingName, containerName = fullName:match("(.+) %- (.+)")
    if not buildingName or not containerName then return nil end
    if buildingName == "World" then
        for _, obj in pairs(game.Workspace:GetDescendants()) do
            if obj.Name == containerName then return obj end
        end
    elseif buildingsFolder then
        local building = buildingsFolder:FindFirstChild(buildingName)
        if building then
            local containerFolder = building:FindFirstChild("containers")
            if containerFolder then
                local container = containerFolder:FindFirstChild(containerName)
                if container then return container end
            end
            for _, obj in pairs(building:GetDescendants()) do
                if obj.Name == containerName then return obj end
            end
        end
    end
    return nil
end

local function teleportToContainer(containerFullName)
    local container = findContainerByFullName(containerFullName)
    if container then
        local targetCFrame = container:IsA("Model") and container:GetPivot() or CFrame.new(container.Position)
        reliableTeleport(targetCFrame, 5)
    end
end

local mainTab = Window:CreateTab("Main", 4483362458)
mainTab:CreateButton({Name = "Teleport to Last Death Position", Callback = teleportToDeathPosition})
mainTab:CreateButton({Name = "Teleport to Last Killed Player's Position", Callback = teleportToKillPosition})
mainTab:CreateToggle({
    Name = "Kill-All(Turn On then OFF quickly)",
    CurrentValue = teleporting,
    Callback = function(value)
        teleporting = value
        if teleporting then
            while teleporting do
                teleportMovingPlayers()
                wait(checkInterval)
            end
        end
    end,
})
mainTab:CreateToggle({
    Name = "Toggle ESP",
    CurrentValue = espEnabled,
    Callback = function(value)
        espEnabled = value
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character then
                if espEnabled then addESP(player.Character) else removeESP(player.Character) end
            end
        end
    end,
})

local containerTab = Window:CreateTab("Container Teleport", 4483362458)
updateContainersList()

containerTab:CreateSection("Quick Access")
containerTab:CreateButton({
    Name = "Refresh Quick Access",
    Callback = function() createQuickAccessButtons() end
})

local function createQuickAccessButtons()
    local containerData = updateContainersList()
    if #containersList == 0 then return end
    for _, buildingInfo in pairs(containerData) do
        containerTab:CreateLabel("🏠 " .. buildingInfo.building)
        for _, container in pairs(buildingInfo.containers) do
            containerTab:CreateButton({
                Name = container.name,
                Callback = function() teleportToContainer(container.fullName) end
            })
        end
    end
end

createQuickAccessButtons()

task.spawn(function()
    while task.wait(1) do
        local player = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("Humanoid") then
            if player.Character.Humanoid.Health <= 0 then onDeath(player.Character) end
            for _, otherPlayer in pairs(game.Players:GetPlayers()) do
                if otherPlayer.Character and otherPlayer.Character.Humanoid.Health <= 0 then
                    onPlayerKilled(player, otherPlayer)
                end
            end
        end
    end
end)

task.spawn(function()
    while task.wait(1) do
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character then
                if espEnabled then addESP(player.Character) else removeESP(player.Character) end
            end
        end
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if teleporting then teleportMovingPlayers() end
end)

local CreditsTab = Window:CreateTab("✨ Credits", "info")
CreditsTab:CreateSection("👑 Creator")
CreditsTab:CreateLabel("🛠️ COMBO_WICK - Discord: world_star_hacker")
CreditsTab:CreateSection("🤝 Co-Developer")
CreditsTab:CreateLabel("💡 GodlyBDS - Discord: godlybds")
CreditsTab:CreateSection("🌐 Discord Server")
CreditsTab:CreateLabel("🔗 Join our server: discord.com/invite/mwTHaCKzhw")
CreditsTab:CreateButton({
    Name = "📋 Copy Discord Link/Youtube",
    Callback = function()
        local links = "Discord: discord.com/invite/mwTHaCKzhw\nYouTube: https://www.youtube.com/@COMBO_WICK"
        setclipboard(links)
    end,
})
